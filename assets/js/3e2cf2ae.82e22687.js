"use strict";(self.webpackChunksquirrels_docs=self.webpackChunksquirrels_docs||[]).push([[7944],{4564:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>l});var r=t(5893),s=t(1151);const i={},o="Versioning Best Practices",a={id:"tips/versioning",title:"Versioning Best Practices",description:"In the [squirrels.yml] file, the major_version under project_variables is required, and defines the version of the project. The following are some best practices around project versioning.",source:"@site/docs/tips/versioning.md",sourceDirName:"tips",slug:"/tips/versioning",permalink:"/docs/tips/versioning",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Deployment",permalink:"/docs/tips/deployment"},next:{title:"Client Usage",permalink:"/docs/category/client-usage"}},c={},l=[];function d(e){const n={admonition:"admonition",h1:"h1",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"versioning-best-practices",children:"Versioning Best Practices"}),"\n",(0,r.jsxs)(n.p,{children:["In the [squirrels.yml] file, the ",(0,r.jsx)(n.strong,{children:"major_version"})," under ",(0,r.jsx)(n.strong,{children:"project_variables"})," is required, and defines the version of the project. The following are some best practices around project versioning."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Start your first major version at 1."}),"\n",(0,r.jsxs)(n.li,{children:["Only increment the major version if it causes breaking changes for clients consuming the data APIs. Understanding how the APIs are used plays a role in knowing what's a breaking change. The following are some examples of breaking changes:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"A column is deleted from a dataset for any given set of parameter selections."}),"\n",(0,r.jsx)(n.li,{children:'A parameter is removed for a dataset if the parameters are not retrieved dynamically with the "parameters API".'}),"\n",(0,r.jsx)(n.li,{children:'A dataset is removed or renamed if datasets are not retrieved dynamically with the "dataset catalog API".'}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Most other changes that are NOT breaking changes DO NOT need to increment the major version. These include:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"A column is added to the dataset"}),"\n",(0,r.jsx)(n.li,{children:"A parameter is added to a dataset"}),"\n",(0,r.jsx)(n.li,{children:"A new dataset is added to the project"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsx)(n.p,{children:'In the future, we intend to create a Cloud platform to host Squirrels APIs with abilities to create and maintain a "stack" of minor versions for each project\'s major version.'})})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>o});var r=t(7294);const s={},i=r.createContext(s);function o(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);